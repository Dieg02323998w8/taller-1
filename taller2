/*
Se necesita construir una aplicaci칩n que permita gestionar los datos de una prueba de atletismo.

De cada atleta se requiere el nombre y el numero asignado.

La prueba consiste en que cada atleta realiza una vuelta en el circuito y se toma su tiempo. Este tiempo deber치 registrarse en un arreglo tipo FIFO. Donde se registre el tiempo de cada corredor que toma cada ronda de la prueba. En este arreglo se mantienen los datos de la ultima prueba.



En un arreglo tipo LIFO se deben ir organizando los datos del menor al mayor en cuanto al promedio. Solamente se pueden ingresar al arreglo LIFO si se cuenta con dos rondas.



Implementar la solicitud de datos del atleta. (20 Puntos)
Implementar el registro de tiempo en FIFO. (30 Puntos)
Implementar el calculo de promedios en LIFO. (20 Puntos)
Gestionar adecuadamente el ordenamiento de LIFO sin romper la l칩gica del movimientos. (30 Puntos)



Se entrega el link de Github donde este el codigo

--------------------------------
integrantes del grupo:

jonathan javier lozano pati침o
Diego Alberto Escobar


*/

#include <iostream>
#include <conio.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

using namespace std;

struct fifo{
    int tiempo_ida;
    int tiempo_vuelta;
	string nombre;       
    struct fifo *sgte;
};

typedef struct fifo *Tlista;

Tlista inicio, fin;
/////////////////////////////////////////////////
struct lifo
{
	string nombre;
	int tiempo_promedio;
	lifo *a;
}*c,*e;

void ingresar(Tlista &inicio, Tlista &fin)
{
 	int contador = 1;
	
    Tlista q;
     
    for(int i=0; i<contador; i++)
    {
        //crea un nuevo nodo
        q = new(struct fifo);
        cout<<"Ingrese el nombre del corredor: \n";
        cin>>q->nombre;
        cout<<"Ingrese el tiempo ida: \n";
        cin>>q->tiempo_ida;
        cout<<"Ingrese el tiempo vuelta: \n";
        cin>>q->tiempo_vuelta;
		 
        //si el primer puntero esta vacio
        //se le da el dato como la cabeza
        if(inicio==NULL)
        {
            q->sgte = inicio;
            inicio  = q;
            fin  = q;          
        }
        else
        {
            q->sgte = fin->sgte;
            fin->sgte = q;
            fin = q;
        }
        
        cout<<"\n\n\tcorredor registrado con exito......"<<endl;
    }
}

void mostrarLista(Tlista inicio)
{
    //mientras que sea diferente a nulo se mostrara la info de los corredores
    while(inicio != NULL)
    {
        cout <<inicio->nombre<<" ida:" << inicio->tiempo_ida<<" Sg "<<" vuelta:" << inicio->tiempo_vuelta<<" Sg\n";
        inicio = inicio->sgte;
    }
}

void promedio_lifo(Tlista inicio)
{
	int suma = 0, promedio = 0;
	
	while (inicio != NULL){
		
		promedio = (inicio->tiempo_ida + inicio->tiempo_vuelta)/ 2;
		cout<<inicio->nombre<<" ida "<<inicio->tiempo_ida<<" vuelta "<<inicio->tiempo_vuelta<<" promedio "<<promedio<<"\n";
		
		if(c == NULL)
		{
			c=new(lifo);
			c->nombre = inicio->nombre;
			c->tiempo_promedio = promedio;
		}else{
			e=new(lifo);
			
			e->nombre = inicio->nombre;
			e->tiempo_promedio = promedio;
			
			e->a = c;
			c = e;
		}
		
		inicio = inicio->sgte;
	}
}

void actualizar_pila()
{	
	int y=2,i,ca=0;
 	e=c;
 	while(e){
 		ca++;
 		e=e->a;
 	}

	for(i=0;i<=ca;i++){
 		cout<<" ";
 	}
 	//muestro lo que tiene la pila!!
 	i=0;
 	e=c;
 	while(e){
 		cout<<"\n";
 		cout<<++i<<" - "<<e->nombre<<" - "<<e->tiempo_promedio;
 		e=e->a;
 	}
}

void menu()
{
	int y,opc;
 	for(;;){
 		cout<<"\n1. Ingresar datos de ida";
 		cout<<"\n2. Mostrar datos de ida";
 		cout<<"\n3. Mostrar promedios";
 		cout<<"\n0. Terminar";
 		cout<<"\n\nIngrese opcion: ";cin>>opc;
 		switch(opc){
 			case 1:
 				ingresar(inicio, fin);
 			break;
 		
 			case 2: 
				mostrarLista(inicio);
 			break;
 			
 			case 3:
 				promedio_lifo(inicio);
 				actualizar_pila();
 			break;	
 			
 			case 0: 
		 		exit(1);
 			default: cout<<"\n Opcion no valida!!"; break;
		}
		
		cout<<"\n\nOprima una tecla para continuar";
		getch();
 	}
}

int main()
{
	menu();
}
