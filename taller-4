#include <iostream>

#include <malloc.h>

#include <cstring>



using namespace std;



// Definición de la estructura del nodo

struct Nodo {

    char nombre[50];

    int numero;

    int vueltas;

    double tiempo_total;

    //los nodos qu se usan para acomodar en el arbol

    Nodo* izq;

    Nodo* der;

};



// Función para crear un nuevo nodo del árbol

Nodo* crearNodo(char nombre[], int numero, int vueltas, double tiempo_total) {

    //crea el nodo usando la funcion de malloc

    Nodo* nuevoNodo = (Nodo*) malloc(sizeof(Nodo));

    //strcpy es una copia de una cadena

    strcpy(nuevoNodo->nombre, nombre);

    //se les da los valores al nodo creado

    nuevoNodo->numero = numero;

    nuevoNodo->vueltas = vueltas;

    nuevoNodo->tiempo_total = tiempo_total;

    //todos los nodos los deja nulos

    nuevoNodo->izq = NULL;

    nuevoNodo->der = NULL;

    //retorna el nuevo nodo

    return nuevoNodo;

}



// Función para insertar un nodo en el árbol

Nodo* insertarNodo(Nodo* raiz, char nombre[], int numero, int vueltas, double tiempo_total) {

    //nodo raiz

    if (raiz == NULL) {

        //llama la funcion de crearnodo que guarda los valores y retorna un nodo llamado raiz 

        raiz = crearNodo(nombre, numero, vueltas, tiempo_total);

    }

    //si el tiempo_total del nodo es menor al tiempo total del nodo

    else if (tiempo_total < raiz->tiempo_total) {

        //pasa ala izquierda

        raiz->izq = insertarNodo(raiz->izq, nombre, numero, vueltas, tiempo_total);

    }

    else {

      //si el tiempo_total del nodo es mayor al tiempo total del nodo

        raiz->der = insertarNodo(raiz->der, nombre, numero, vueltas, tiempo_total);

        //pasa ala derecha

    }

    return raiz; //y si no devuelve el nodo

}



// Función para calcular el promedio del tiempo de un atleta

double calcularPromedioTiempo(double tiempo_total, int vueltas) {

  //divide los tiempo entre el numero de vueltas

    return tiempo_total / vueltas;

}



// Función para buscarnodo ya que si hay un atleta que tiene el mismo numero de corredor busque entr los que hay y no los repita

Nodo* buscarNodo(Nodo* raiz, int numero) {

    if (raiz == NULL || raiz->numero == numero) {

        return raiz;

    }

    if (numero < raiz->numero) {

        return buscarNodo(raiz->izq, numero);

    }

    return buscarNodo(raiz->der, numero);

}







// Función para solicitar los datos de un atleta y agregarlo al árbol

void agregarAtleta(Nodo*& raiz) {

    char nombre[50];

    int numero;

    int vueltas;

    double tiempo_total;

    cout << "Ingrese el nombre del atleta: ";

    cin >> nombre;

    cout << "Ingrese el número asignado al atleta: ";

    cin >> numero;



    // hay que Validar si el número ya ha sido utilizado

    Nodo* nodoExistente = buscarNodo(raiz, numero);

    if (nodoExistente != NULL) {

        cout << "El número " << numero << " ya ha sido utilizado por otro atleta." << endl;

        return;

    }



    cout << "Ingrese la cantidad de vueltas del atleta: ";

    cin >> vueltas;

    if (vueltas < 2) {

        cout << "El atleta debe dar al menos dos vueltas." << endl;

    }

    else {

        cout << "Ingrese el tiempo total del atleta: ";

        cin >> tiempo_total;

        //se calcula el promedio de una vez se agrega el atleta

        double promedio_tiempo = calcularPromedioTiempo(tiempo_total, vueltas);

        raiz = insertarNodo(raiz, nombre, numero, vueltas, promedio_tiempo);

    }

}



// Función que se encarga de mostrar todos los usuarios registrados 

void mostrarArbol(Nodo* raiz) {

  //se hace el condicional 

    if (raiz != NULL) {

      //primero muestra a los de la izquierda

        mostrarArbol(raiz->izq);

        cout << "Nombre: " << raiz->nombre << ", Numero: " << raiz->numero << ", Vueltas: " << raiz->vueltas << ", Tiempo promedio: " << raiz->tiempo_total << endl;

        mostrarArbol(raiz->der); //luego los de la derecha 

    }

}



int main() {

    Nodo* raiz = NULL;

    int opcion = 0;

    while (opcion != 4) {

        cout << endl << "Menu" << endl;

        cout << "1. Agregar atleta" << endl;

        cout << "2. Mostrar arbol" << endl;

        cout << "3. Balancear arbol" << endl;

        cout << "4. Salir" << endl;

        cout << "Seleccione una opcion: ";

        cin >> opcion;

        switch (opcion) {

            case 1:

                agregarAtleta(raiz);

            break;

            case 2:

              mostrarArbol(raiz);

              break;



          default:

          break;

        }

    }



  return 0;

}
